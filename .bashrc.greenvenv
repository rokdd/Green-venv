#!/bin/bash

function greenvenv_loadconsts()
{
	# Terminal colors
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)
BOLD=$(tput bold)
greenvenv_txt_indexing='When you could not found what you are looking for you might to update index: "sudo updatedb" '
greenvenv_txt_bye="Bye!"
}
# Prints a line with color using terminal codes
function greenvenv_print()
{
  printf "%s\n" "${!2}$1${NORMAL}"

}

function greenvenv_find()
{
echo ""
}

function greenvenv_cleanup()
{
	for var in "${!greenvenv_@}"; do
    unset "${!var}"
done

}

function chenv()
{
	greenvenv_loadconsts
#locate bases on a database which is daily updated. to manually update: sudo updatedb
files=(`locate --regex "bin/activate"$ | sed 's/bin\/activate$//'`)

PS3='Select a env to activate, or 0 to exit: '
select file in "${files[@]}"; do
	if [[ $REPLY == "0" ]]; then
		echo greenvenv_txt_bye
		break
	elif [[ -z $file ]]; then
		greenvenv_print 'Invalid choice, try again' RED
		break
	else
		echo 'Deactivate current env..' 
		deactivate
		greenvenv_print 'Activate choosen environment.. Enjoy' GREEN
		source "${file}bin/activate"
		break
	fi
done
greenvenv_cleanup
}

function chdjango()
{
	greenvenv_loadconsts

#locate bases on a database which is daily updated. to manually update: sudo updatedb
files=(`locate --regex "/home/.*/manage.py"$ | sed 's/manage.py$//'`)
shopt -s expand_aliases
PS3='Select a django project, or 0 to exit: '
select file in "${files[@]}"; do
	echo ""
	if [[ $REPLY == "0" ]]; then
		greenvenv_print greenvenv_txt_indexing YELLOW
		echo greenvenv_txt_bye
		break
	elif [[ -z $file ]]; then
		greenvenv_print greenvenv_txt_indexing YELLOW
		greenvenv_print 'Invalid choice, try again' RED
		break
	else
		#change to the directory of the project
		cd "${file}"

		#based on https://stackoverflow.com/questions/45216663/how-to-automatically-activate-virtualenvs-when-cding-into-a-directory
		venv_cfg_filepath=$(find . -maxdepth 2 -type f -name 'pyvenv.cfg' 2> /dev/null)
		if [[ -z "$venv_cfg_filepath" ]]; then
			greenvenv_print "no config file found. Please locate pyvenv.cfg in the same directory" RED
			return # no config file found
		fi

		source ${venv_cfg_filepath}
		
		
		#echo "config file found $venv_cfg_filepath and the path to the env -$venv_filepath<"
		if [ -d "$venv" ]; then
			if [[ ! -z "$VIRTUAL_ENV" ]]; then
			
			[ "$(type -t deactivate)" = "function" ] && echo "- Deactivate current one" && deactivate nondestructive
			fi
			greenvenv_print "- Activate $venv" GREEN
			
			source "${venv}"/bin/activate
			#cmd_restart=$(awk -F"=" '/^cmd_restart/{print $2}' ${venv_cfg_filepath})
			#echo ">$cmd_restart<"
			alias_restart="python ${file}manage.py makemigrations && python ${file}manage.py migrate && python ${file}manage.py collectstatic --no-input"
			if [[ ! -z "$cmd_restart" ]]; then
				alias_restart+=" && ${cmd_restart}"
			fi
			alias_restart+=' && echo -e "\07" && echo -e "\007" '
			alias restart="${alias_restart}"
			echo "- Alias 'restart': \"migrate and restart django: ${alias_restart}\""
			#check for other aliases
			cat ${venv_cfg_filepath} | awk -F= '/^alias /{print $0}'  | while read line
				do
					OLDIFS="$IFS"
					IFS="="
					set -- $line
					IFS="$OLDIFS"
				    echo "- Alias '${1:6}': $2"
				done
			echo "- Other Aliases you can register directly in the pyenv"
		else
			echo "$venv is not a directory or readable ${venv_cfg_filepath}"
		fi
		
		break
	fi
done
greenvenv_cleanup
greenvenv_print greenvenv_txt_indexing YELLOW
}